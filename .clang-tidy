---
FormatStyle:     file
CheckOptions:
  - { key: readability-identifier-naming.ClassCase,             value: CamelCase  }
  - { key: readability-identifier-naming.ClassMemberCase,       value: CamelCase  }
  - { key: readability-identifier-naming.ClassMemberPrefix,     value: 'the'      }
  - { key: readability-identifier-naming.ClassMethodCase,       value: camelBack  }
  - { key: readability-identifier-naming.MethodCase,            value: camelBack  }
  - { key: readability-identifier-naming.EnumCase,              value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantCase,      value: aNy_CasE }
  - { key: readability-identifier-naming.FunctionCase,          value: camelBack  }
  - { key: readability-identifier-naming.InlineNamespaceCase,   value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,     value: CamelCase  }
  - { key: readability-identifier-naming.LocalVariablePrefix,   value: 'my'       }
  - { key: readability-identifier-naming.NamespaceCase,         value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase,     value: CamelCase  }
  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: 'the'      }
  - { key: readability-identifier-naming.ParameterCase,         value: CamelCase  }
  - { key: readability-identifier-naming.ParameterPrefix,       value: 'a'        }
  - { key: readability-identifier-naming.ParameterIgnoredRegexp,value: 'an[A-Z].*'}
  - { key: readability-identifier-naming.MemberCase,            value: camelBack  }
  - { key: readability-identifier-naming.MemberPrefix,          value: ''         }
  - { key: readability-identifier-naming.StructCase,            value: CamelCase  }
  - { key: readability-identifier-naming.UnionCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase  }
  - { key: readability-identifier-naming.TypeAliasCase,         value: CamelCase  }
  - { key: readability-identifier-naming.TypedefCase,           value: CamelCase  }
  - { key: readability-identifier-naming.StaticConstantCase,    value: CamelCase  }
  - { key: readability-identifier-naming.StaticConstantPrefix,  value: ''         }
  - { key: readability-identifier-naming.ClassConstantCase,     value: CamelCase  }
  - { key: readability-identifier-naming.ClassConstantPrefix,   value: ''         }
  - { key: readability-identifier-naming.GlobalConstantCase,    value: CamelCase  }

# https://reviews.llvm.org/D72566 Don't use wildcards
Checks: '-*,
    bugprone-argument-comment,
    bugprone-assert-side-effect,
    bugprone-bad-signal-to-kill-thread,
    bugprone-bool-pointer-implicit-conversion,
    bugprone-copy-constructor-init,
    bugprone-dangling-handle,
    bugprone-dynamic-static-initializers,
    bugprone-fold-init-type,
    bugprone-forward-declaration-namespace,
    bugprone-forwarding-reference-overload,
    bugprone-inaccurate-erase,
    bugprone-incorrect-roundings,
    bugprone-infinite-loop,
    bugprone-integer-division,
    bugprone-lambda-function-name,
    bugprone-macro-parentheses,
    bugprone-macro-repeated-side-effects,
    bugprone-misplaced-operator-in-strlen-in-alloc,
    bugprone-misplaced-pointer-arithmetic-in-alloc,
    bugprone-misplaced-widening-cast,
    bugprone-move-forwarding-reference,
    bugprone-multiple-statement-macro,
    bugprone-narrowing-conversions,
    bugprone-no-escape,
    bugprone-not-null-terminated-result,
    bugprone-parent-virtual-call,
    bugprone-posix-return,
    bugprone-sizeof-container,
    bugprone-sizeof-expression,
    bugprone-spuriously-wake-up-functions,
    bugprone-string-constructor,
    bugprone-string-integer-assignment,
    bugprone-string-literal-with-embedded-nul,
    bugprone-suspicious-enum-usage,
    bugprone-suspicious-include,
    bugprone-suspicious-memset-usage,
    bugprone-suspicious-missing-comma,
    bugprone-suspicious-semicolon,
    bugprone-suspicious-string-compare,
    bugprone-swapped-arguments,
    bugprone-terminating-continue,
    bugprone-throw-keyword-missing,
    bugprone-too-small-loop-variable,
    bugprone-undefined-memory-manipulation,
    bugprone-undelegated-constructor,
    bugprone-unhandled-self-assignment,
    bugprone-unused-raii,
    bugprone-unused-return-value,
    bugprone-use-after-move,
    bugprone-virtual-near-miss,
    cppcoreguidelines-interfaces-global-init,
    cppcoreguidelines-macro-usage,
    cppcoreguidelines-narrowing-conversions,
    cppcoreguidelines-no-malloc,
    cppcoreguidelines-pro-type-const-cast,
    cppcoreguidelines-pro-type-cstyle-cast,
    cppcoreguidelines-pro-type-static-cast-downcast,
    cppcoreguidelines-pro-type-union-access,
    cppcoreguidelines-slicing,
    cppcoreguidelines-avoid-goto,
    google-build-namespaces,
    google-explicit-constructor,
    google-global-names-in-headers,
    google-readability-casting,
    google-runtime-operator,
    google-upgrade-googletest-case,
    hicpp-exception-baseclass,
    misc-definitions-in-headers,
    misc-misplaced-const,
    misc-new-delete-overloads,
    misc-non-copyable-objects,
    misc-redundant-expression,
    misc-static-assert,
    misc-throw-by-value-catch-by-reference,
    misc-unconventional-assign-operator,
    misc-uniqueptr-reset-release,
    misc-unused-alias-decls,
    misc-unused-using-decls,
    modernize-avoid-bind,
    modernize-avoid-c-arrays,
    modernize-concat-nested-namespaces,
    modernize-deprecated-headers,
    modernize-deprecated-ios-base-aliases,
    modernize-loop-convert,
    modernize-make-shared,
    modernize-make-unique,
    modernize-raw-string-literal,
    modernize-redundant-void-arg,
    modernize-replace-auto-ptr,
    modernize-replace-disallow-copy-and-assign-macro,
    modernize-replace-random-shuffle,
    modernize-shrink-to-fit,
    modernize-unary-static-assert,
    modernize-use-auto,
    modernize-use-bool-literals,
    modernize-use-default-member-init,
    modernize-use-equals-default,
    modernize-use-equals-delete,
    modernize-use-noexcept,
    modernize-use-nullptr,
    modernize-use-override,
    modernize-use-transparent-functors,
    modernize-use-uncaught-exceptions,
    modernize-use-using,
    performance-faster-string-find,
    performance-for-range-copy,
    performance-implicit-conversion-in-loop,
    performance-inefficient-algorithm,
    performance-inefficient-string-concatenation,
    performance-inefficient-vector-operation,
    performance-move-const-arg,
    performance-move-constructor-init,
    performance-no-automatic-move,
    performance-noexcept-move-constructor,
    performance-trivially-destructible,
    performance-type-promotion-in-math-fn,
    performance-unnecessary-copy-initialization,
    readability-avoid-const-params-in-decls,
    readability-braces-around-statements,
    readability-const-return-type,
    readability-container-size-empty,
    readability-delete-null-pointer,
    readability-deleted-default,
    readability-function-size,
    readability-inconsistent-declaration-parameter-name,
    readability-isolate-declaration,
    readability-make-member-function-const,
    readability-misleading-indentation,
    readability-misplaced-array-index,
    readability-non-const-parameter,
    readability-redundant-access-specifiers,
    readability-redundant-control-flow,
    readability-redundant-declaration,
    readability-redundant-function-ptr-dereference,
    readability-redundant-member-init,
    readability-redundant-preprocessor,
    readability-redundant-smartptr-get,
    readability-redundant-string-cstr,
    readability-redundant-string-init,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-static-definition-in-anonymous-namespace,
    readability-string-compare,
    readability-uniqueptr-delete-release,
    readability-uppercase-literal-suffix,
    readability-identifier-naming'

# TODO(https://reviews.llvm.org/D90835?id=303121)
#  gtest macros are incorrectly identified as our own code, leading to many false-positives from these checks:
#  - cppcoreguidelines-avoid-non-const-global-variables
#  - cppcoreguidelines-special-member-functions
...
