name: Cleanup Merged Gerrit Branches

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Only fetch recent commits since we only check pushed commits
          # For manual trigger, we check last 100 commits, so fetch 150 to be safe
          fetch-depth: 150

      - name: Delete merged change branches
        id: delete_branches
        run: |
          set -e

          echo "Fetching all branches..."
          git fetch --all

          # For push events, get the commits that were just pushed
          if [ "${{ github.event_name }}" = "push" ]; then
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.event.after }}"

            echo "Analyzing commits pushed to main..."
            echo "Before: $BEFORE"
            echo "After: $AFTER"

            # Get commits that were just pushed
            PUSHED_COMMITS=$(git rev-list $BEFORE..$AFTER 2>/dev/null || git rev-list $AFTER)
          else
            # For manual workflow_dispatch, check recent commits (last 100)
            echo "Manual trigger: checking last 100 commits..."
            PUSHED_COMMITS=$(git rev-list -n 100 origin/main)
          fi

          if [ -z "$PUSHED_COMMITS" ]; then
            echo "No commits to process"
            exit 0
          fi

          COMMIT_COUNT=$(echo "$PUSHED_COMMITS" | wc -l | tr -d ' ')
          echo "Processing $COMMIT_COUNT commit(s)..."

          # Extract Change-Ids from the pushed commits
          CHANGE_IDS=""
          for commit in $PUSHED_COMMITS; do
            CHANGE_ID=$(git show -s --format='%B' "$commit" | grep -oP 'Change-Id: \K.*' || true)
            if [ -n "$CHANGE_ID" ]; then
              CHANGE_IDS="${CHANGE_IDS}${CHANGE_ID}"$'\n'
              echo "  Found Change-Id: $CHANGE_ID (commit: ${commit:0:8})"
            fi
          done

          # Remove duplicates and empty lines
          CHANGE_IDS=$(echo "$CHANGE_IDS" | sort -u | grep -v '^$' || true)

          if [ -z "$CHANGE_IDS" ]; then
            echo "No Change-Ids found in pushed commits"
            exit 0
          fi

          CHANGE_ID_COUNT=$(echo "$CHANGE_IDS" | wc -l | tr -d ' ')
          echo ""
          echo "Found $CHANGE_ID_COUNT unique Change-Id(s) to clean up"
          echo ""

          # Now delete branches that match these Change-Ids
          DELETED_COUNT=0
          SKIPPED_COUNT=0

          for change_id in $CHANGE_IDS; do
            BRANCH="changes/$change_id"
            echo "Checking if branch $BRANCH exists..."

            # Check if the branch exists on remote
            if git rev-parse --verify "origin/$BRANCH" >/dev/null 2>&1; then
              echo "✓ Branch $BRANCH exists, deleting..."
              git push origin --delete "$BRANCH" 2>/dev/null && {
                echo "  Deleted successfully"
                DELETED_COUNT=$((DELETED_COUNT + 1))
              } || {
                echo "  ⚠️ Failed to delete $BRANCH"
                SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              }
            else
              echo "⊘ Branch $BRANCH doesn't exist (may have been already deleted)"
              SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
            fi
          done

          echo ""
          echo "Summary:"
          echo "  Processed: $CHANGE_ID_COUNT Change-Id(s)"
          echo "  Deleted: $DELETED_COUNT branch(es)"
          echo "  Skipped: $SKIPPED_COUNT branch(es)"

          # Export CHANGE_IDS for use in cache cleanup step
          {
            echo "change_ids<<EOF"
            echo "$CHANGE_IDS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Delete caches for merged branches
        if: steps.delete_branches.outputs.change_ids != ''
        run: |
          set -e

          echo ""
          echo "Cleaning up caches for deleted branches..."
          echo ""

          TOTAL_DELETED=0
          TOTAL_FAILED=0

          # Get CHANGE_IDS from previous step output
          CHANGE_IDS="${{ steps.delete_branches.outputs.change_ids }}"

          # Process each Change-Id that was found
          for change_id in $CHANGE_IDS; do
            BRANCH_REF="refs/heads/changes/$change_id"
            echo "Checking caches for $BRANCH_REF..."

            # List all caches for this branch ref
            CACHE_IDS=$(gh cache list --ref "$BRANCH_REF" --limit 100 --json id --jq '.[].id' 2>/dev/null || true)

            if [ -z "$CACHE_IDS" ]; then
              echo "  ⊘ No caches found"
              continue
            fi

            CACHE_COUNT=$(echo "$CACHE_IDS" | wc -l | tr -d ' ')
            echo "  Found $CACHE_COUNT cache(s) to delete"

            # Delete each cache (don't fail workflow if deletion fails)
            set +e
            for cache_id in $CACHE_IDS; do
              gh cache delete "$cache_id" 2>/dev/null && {
                echo "    ✓ Deleted cache $cache_id"
                TOTAL_DELETED=$((TOTAL_DELETED + 1))
              } || {
                echo "    ⚠️ Failed to delete cache $cache_id"
                TOTAL_FAILED=$((TOTAL_FAILED + 1))
              }
            done
            set -e
          done

          echo ""
          echo "Cache Cleanup Summary:"
          echo "  Caches deleted: $TOTAL_DELETED"
          echo "  Caches failed: $TOTAL_FAILED"
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
