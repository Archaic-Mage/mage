name: Bazel MultiPlatform

on:
  workflow_call:
    inputs:
      gerrit_change_id:
        description: 'Gerrit change id to post the result'
        required: false
        type: string
        default: ''

jobs:
  build:
    name: Bazel C++ Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install C++ build tools on Linux
      - name: Install Linux build tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 zip unzip

      # (Optional) Install C++ prerequisites on macOS
      - name: Install macOS prerequisites
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install zip unzip

      # Windows runners include Visual Studio Build Tools by default

      # Cache Bazel outputs and external dependencies
      - name: Cache Bazel
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/bazel
            bazel-out
            bazel-*
            external
          key: ${{ runner.os }}-bazel-${{ hashFiles('**/WORKSPACE', '**/*.bzl') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      # Setup Bazel
      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}

      # Optional: Confirm toolchain
      - name: Configure Bazel C++ toolchain
        run: |
          echo "Runner OS: ${{ runner.os }}"
          # Bazel will auto-detect the appropriate C++ toolchain

      # Build all C++ targets
      - name: Bazel Build
        run: bazel build --cxxopt=-std=c++20 --macos_minimum_os=13.3 //...

      # Run C++ tests
      - name: Bazel Test
        run: bazel test --cxxopt=-std=c++20 --macos_minimum_os=13.3 --test_output=errors //...

      - name: Get VOTE
        if: ${{ inputs.gerrit_change_id != '' }}
        id: vote
        run: |
          if [[ "${{ job.status }}" == 'success' ]]; then
            echo "vote=+1" >> $GITHUB_OUTPUT
          else
            echo "vote=-1" >> $GITHUB_OUTPUT
          fi

      - name: Get label
        if: ${{ inputs.gerrit_change_id != '' }}
        id: label
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest) echo "label=Verified-Ubuntu" >> $GITHUB_OUTPUT ;;
            macos-latest)  echo "label=Verified-Mac" >> $GITHUB_OUTPUT ;;
            *)             echo "label=Verified" >> $GITHUB_OUTPUT ;;
          esac

      - name: Post result to Gerrit
        if: ${{ inputs.gerrit_change_id != '' }}
        shell: bash
        env:
          RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          curl -u "${{ secrets.GERRIT_USER }}:${{ secrets.GERRIT_PASSWORD }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "message": "GitHub Actions run on ${{ env.RUN_URL }}",
                 "labels": { "${{ steps.label.outputs.label }}": "${{ steps.vote.outputs.vote }}" }
               }' \
               "https://gerrithub.io/a/changes/${{ inputs.gerrit_change_id }}/revisions/current/review"

  report:
    name: Report to Gerrit
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.gerrit_change_id != '' }}
    steps:
      - name: Determine overall matrix result
        id: check
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "vote=+1" >> $GITHUB_OUTPUT
          else
            echo "vote=-1" >> $GITHUB_OUTPUT
          fi

      - name: Post result to Gerrit
        shell: bash
        env:
          RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          curl -u "${{ secrets.GERRIT_USER }}:${{ secrets.GERRIT_PASSWORD }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "message": "GitHub Actions run: ${{ env.RUN_URL }}",
                 "labels": { "Verified": "${{ steps.check.outputs.vote }}" }
               }' \
               "https://gerrithub.io/a/changes/${{ inputs.gerrit_change_id }}/revisions/current/review"
